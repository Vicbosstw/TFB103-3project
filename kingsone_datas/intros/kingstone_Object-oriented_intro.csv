ISBN,書籍簡介
9781801077262,"

A comprehensive guide to exploring modern Python through data structures, design patterns, and effective object-oriented techniquesKey Features: Build an intuitive understanding of object-oriented design, from introductory to mature programs Learn the ins and outs of Python syntax, libraries, and best practices Examine a machine-learning case study at the end of each chapterBook Description: Python Object-Oriented Programming, Fourth Edition dives deep into the various aspects of OOP, Python as an OOP language, common and advanced design patterns, and hands-on data manipulation and testing of more complex OOP systems. These concepts are consolidated by open-ended exercises, as well as a real-world case study at the end of every chapter, newly written for this edition. All example code is now compatible with Python 3.9+ syntax and has been updated with type hints for ease of learning. Steven and Dusty provide a friendly, comprehensive tour of important OOP concepts, such as inheritance, composition, and polymorphism, and explain how they work together with Python's classes and data structures to facilitate good design. UML class diagrams are generously used throughout the text for you to understand class relationships. Beyond the book's focus on OOP, it features an in-depth look at Python's exception handling and how functional programming intersects with OOP. Not one, but two very powerful automated testing systems, unittest and pytest, are introduced in this book. The final chapter provides a detailed discussion of Python's concurrent programming ecosystem. By the end of the book, you will have a thorough understanding of how to think about and apply object-oriented principles using Python syntax and be able to confidently create robust and reliable programs.What You Will Learn: Implement objects in Python by creating classes and defining methodsExtend class functionality using inheritanceUse exceptions to handle unusual situations cleanlyUnderstand when to use object-oriented features, and more importantly, when not to use themDiscover several widely used design patterns and how they are implemented in PythonUncover the simplicity of unit and integration testing and understand why they are so importantLearn to statically type check your dynamic codeUnderstand concurrency with asyncio and how it speeds up programsWho this book is for: If you are new to object-oriented programming techniques, or if you have basic Python skills and wish to learn how and when to correctly apply OOP principles in Python, this is the book for you. Moreover, if you are an object-oriented programmer coming from other languages or seeking a leg up in the new world of Python, you will find this book a useful introduction to Python. Minimal previous experience with Python is necessary.
                    
"
9781492051541,"

Save time and trouble building object-oriented, functional, and concurrent applications with Scala 3. The latest edition of this comprehensive cookbook is packed with more than 250 ready-to-use recipes and 700 code examples to help you solve the most common problems when working with Scala and its popular libraries.Whether you're working on web, big data, or distributed applications, this cookbook provides recipes based on real-world scenarios for experienced Scala developers and for programmers just learning to use this JVM language. Author Alvin Alexander includes practical solutions from his experience using Scala for highly scalable applications that support concurrency and distribution.Recipes cover: Strings, numbers, and control structuresClasses, methods, objects, traits, packaging, and importsFunctional programming in a variety of situationsBuilding Scala applications with sbtCollections covering Scala's wealth of classes and methodsActors and concurrencyList, array, map, set, and moreFiles, processes, and command-line tasksWeb services and interacting with JavaDatabases and persistence, data types and idioms
                    
"
9786203472646,"

This book describes the identification of Subgraphs in the Object-Oriented Design using a Closed subgraph mining Algorithm. Objected Oriented Programming (OOP) allows to leverage the best practices and principles, thus reduces a human effort for reinventing new design. Further, understanding a software design is not an easy task, it requires a lot of domain and a deep understanding of OOP principles. Therefore, it becomes necessary to identify similar design structures in a group.Further, for large object-oriented systems, it is difficult to understand the functionalities because of their topological and behavioral complexity. It is even more difficult to extend or modify an existing design, which can be error-prone and can even lead to poor quality of software. Developers who work with software systems tend to break large and complex systems into smaller sub-components. Therefore, this research work proposes a partitioning based graph mining approach to discover frequent identical design patterns in an object-oriented design model.
                    
"
9780367820817,"

Do modern programming languages, IDEs, and libraries make coding easy? Maybe, but coding is not design. Large-scale or expensive apps clearly require evaluation of design choices. Still, software design directly impacts code reuse and longevity even for small-scale apps with limited overhead. This text evaluates and contrasts common object-oriented designs. A given problem may have many solutions. A developer may employ different design techniques - composition, inheritance, dependency injection, delegation, etc. - to solve a particular problem. A skilled developer can determine the costs and benefits of different design responses, even amid competing concerns. A responsible developer documents design choices as a contract with the client, delineating external and internal responsibilities. To promote effective software design, this book examines contractual, object-oriented designs for immediate and sustained use as well as code reuse. The intent of identifying design variants is to recognize and manage conflicting goals such as short versus long-term utility, stability versus flexibility, and storage versus computation. Many examples are given to evaluate and contrast different solutions and to compare C# and C++ effects. No one has a crystal ball; however, deliberate design promotes software longevity. With the prominence of legacy OO code, a clear understanding of different object-oriented designs is essential. Design questions abound. Is code reuse better with inheritance or composition? Should composition rely on complete encapsulation? Design choices impact flexibility, efficiency, stability, longevity, and reuse, yet compilers do not enforce design and syntax does not necessarily illustrate design. Through deliberate design, or redesign when refactoring, developers construct sustainable, efficient code.
                    
"
9780367820183,"

Do modern programming languages, IDEs, and libraries make coding easy? Maybe, but coding is not design. Large-scale or expensive apps clearly require evaluation of design choices. Still, software design directly impacts code reuse and longevity even for small-scale apps with limited overhead. This text evaluates and contrasts common object-oriented designs. A given problem may have many solutions. A developer may employ different design techniques - composition, inheritance, dependency injection, delegation, etc. - to solve a particular problem. A skilled developer can determine the costs and benefits of different design responses, even amid competing concerns. A responsible developer documents design choices as a contract with the client, delineating external and internal responsibilities. To promote effective software design, this book examines contractual, object-oriented designs for immediate and sustained use as well as code reuse. The intent of identifying design variants is to recognize and manage conflicting goals such as short versus long-term utility, stability versus flexibility, and storage versus computation. Many examples are given to evaluate and contrast different solutions and to compare C# and C++ effects. No one has a crystal ball; however, deliberate design promotes software longevity. With the prominence of legacy OO code, a clear understanding of different object-oriented designs is essential. Design questions abound. Is code reuse better with inheritance or composition? Should composition rely on complete encapsulation? Design choices impact flexibility, efficiency, stability, longevity, and reuse, yet compilers do not enforce design and syntax does not necessarily illustrate design. Through deliberate design, or redesign when refactoring, developers construct sustainable, efficient code.
                    
"
9786200432704,"

Object-oriented Programming, or OOP for short, is a programming paradigm which provides a means of structuring programs so that properties and behaviors are bundled into individual objects.For instance, an object could represent a person with a name property, age, address, etc., with behaviors like walking, talking, breathing, and running. Or an email with properties like recipient list, subject, body, etc., and behaviors like adding attachments and sending.Put another way, object-oriented programming is an approach for modeling concrete, real-world things like cars as well as relations between things like companies and employees, students and teachers, etc. OOP models real-world entities as software objects, which have some data associated with them and can perform certain functions.
                    
"
9786202668156,"

Object-oriented Modeling and DesignThe aim of this book is to understand: What is Object Orientation? What is OO development? OO themes; Evidence for the usefulness of OO development; OO modeling history. Modeling as Design Technique: Modeling; abstraction; The three models. Class Modeling: Object and class concepts; Link and associations concepts; Generalization and inheritance; A sample class model; Navigation of class models.
                    
"
9780367579173,"

There has been an increasing demand in GIS for systems that support historical data: time-series data as well as mobility information. From a modelling perspective, there are advantages in integrating object-oriented analysis and design to databases as well as to visualisation capabilities of GIS.Object-Oriented Design for Temporal GIS explores the major components of the object-oriented analysis and design methods, how they can be used for modelling spatio-temporal data, and how these components are developed and maintained within a GIS. It also offers practical guidance to object-oriented methods by demonstrating the feasibility of applying such methods to issues involved in handling spatio-temporal data. The author demonstrates how this knowledge might be used in a wide range of applications such as political boundary record maintenance (historical data), disease incidence rate analysis in epidemics (diffusion rate), and environmental studies of climate change (time-series data). This understanding contributes to the development of theory in GIS and improves the design of GIS to support the modelling of semantics, space and time elements of geographical information.
                    
"
9786200311009,"

Object-oriented analysis and design (OOAD) is a software engineering approach that models a system as a group of interacting objects. Each object represents some entity of interest in the system being modeled and is characterized by its class, its state (data elements), and its behavior. Various models can be created to show the static structure, dynamic behavior, and run-time deployment of these collaborating objects. In OOAD the boundary between analysis and design is blurred. One reason for this blurring is the similarity of basic constructs (i.e., objects and classes) that are used in analysis and design. The fundamental difference between OOA and OOD is that OOA models the problem domain, leading to an understanding and specification of the problem, while OOD models the solution to the problem. That is analysis deal with the problem domain, while design deals with the solution domain. However, in OOAD it is believed that the problem domain representation created by OOA is generally subsumed in the solution domain representation. That is, the solution domain representation, created by OOD, generally contains much of the representation created by OOA.
                    
"
9786202513463,"

The book contains OOP Concepts: Data abstraction, encapsulation, inheritance, Benefits of Inheritance, Polymorphism, classes and objects, Procedural and object oriented programming paradigms. Java Programming - History of Java, comments, Data types, Variables, Constants, Scope and Lifetime of variables, Operators, Operator Hierarchy, Expressions, Type conversion and casting, Enumerated types, Control flow - block scope, conditional statements, loops, break and continue statements, simple java stand alone programs, arrays, console input and output, formatting output, constructors, methods, parameter passing, static fields and methods, access control, this reference, overloading methods and constructors, recursion, garbage collection, building strings, exploring string class.
                    
"
9781700776730,"

Detailed study of the C++ programming language and its support for data abstraction, abstract data types and object-oriented programming. Presents an introduction to the fundamental elements of object-oriented programming including objects, classes, encapsulation, constructors and destructors, function and operator overloading, references, assignment and initialization, container relationships, inheritance, polymorphism, and templates.
                    
"
9781536147551,0
9783319901039,"

This book constitutes the thoroughly refereed workshop proceedings of the 7th International Workshop on Structured Object-Oriented Formal Language and Method, SOFL+MSVL 2017, held in Xi'an, China, in November 2017. The 13 revised full papers included in the volume were carefully reviewed and selected from 21 submissions. They are organized in the following topical sections: animation and prototyping; graph theory; model checking; modeling and specification; and verification and validation.
                    
"
9781484228371,"

Conquer your fear and anxiety learning how the concepts behind object-oriented design apply to the ABAP programming environment. Through simple examples and metaphors this book demystifies the object-oriented programming model.Object-Oriented Design with ABAP presents a bridge from the familiar procedural style of ABAP to the unfamiliar object-oriented style, taking you by the hand and leading you through the difficulties associated with learning these concepts, covering not only the nuances of using object-oriented principles in ABAP software design but also revealing the reasons why these concepts have become embraced throughout the software development industry. More than simply knowing how to use various object-oriented techniques, you'll also be able to determine whether a technique is applicable to the task the software addresses. This book: Shows how object-oriented principles apply to ABAP program designProvides the basics for creating component design diagramsTeaches how to incorporate design patterns in ABAP programsWhat You'll LearnWrite ABAP code using the object-oriented model as comfortably and easily as using the procedural modelCreate ABAP design diagrams based on the Unified Modeling LanguageImplement object-oriented design patterns into ABAP programsReap the benefits of spending less time designing and maintaining ABAP programsRecognize those situations where design patterns can be most helpfulAvoid long and exhausting searches for the cause of bugs in ABAP programs  Who This Book Is ForExperienced ABAP programmers who remain unfamiliar with the design potential presented by the object-oriented aspect of the language>
                    
"
9781430257493,0
9781512220223,0
9781505398489,0
9781430249351,"

Learn C# with Beginning C# Object-Oriented Programming and you'll be thinking about program design in the right way from day one. Whether you want to work with .NET for the web or desktop, or for Windows 8 on any device, Dan Clark's accessible, quick-paced guide will give you the foundation you need for a successful future in C# programming.    In this book you will:   Master the fundamentals of object-oriented programming  Work through a case study to see how C# and OOP work in a real-world application  Develop techniques and best practices that lead to efficient, reusable, elegant code  Discover how to transform a simple model of an application into a fully-functional C# project.   With more than 30 fully hands-on activities, Beginning C# Object-Oriented Programming teaches you how to design a user interface, implement your business logic, and integrate your application with a relational database for data storage. Along the way, you will explore the .NET Framework, ASP.NET and WinRT. In addition, you will develop desktop, mobile and web-based user interfaces, and service-oriented programming skills, all using Microsoft's industry-leading Visual Studio 2012, C#, the Entity Framework, and more. Read this book and let Dan Clark guide you in your journey to becoming a confident C# programmer.
                    
"
9781118336922,"

The ideal beginner's guide to C# and object-oriented programming Wrox beginners' guides have the perfect formula for getting programming newcomers up and running. This one introduces beginners to object-oriented programming using C# to demonstrate all of the core constructs of this programming framework. Using real-world situations, you'll discover how to create, test, and deliver your programs and how to work with classes, arrays, collections, and all the elements of object-oriented programming.  Covers exactly what beginners, even those with no prior programming experience, need to know to understand object-oriented programming and start writing programs in C# Explains the advantages and disadvantages of C#, and tips for understanding C# syntax Explores properties, encapsulation, and classes; value data types; operands and operators; errors and debugging; variables; and reference types Shows how to use statement repetition and program loops, understand arrays and collections, and write your own classes Also covers inheritance and polymorphism  Beginning Object-Oriented Programming with C# uses the tried-and-true Wrox formula for making this popular programming method easy to learn.
                    
"
9780198065302,0
9781447133919,0
9780131500563,0
9781613249970,0
9781849965217,0
9781430235309,"

Beginning C# Object-Oriented Programming brings you into the modern world of development as you master the fundamentals of programming with C# and learn to develop efficient, reusable, elegant code through the object-oriented programming (OOP) methodology. Take your skills out of the 20th century and into this one with Dan Clark's accessible, quick-paced guide to C# and object-oriented programming, completely updated for .NET 4.0 and C# 4.0.  As you develop techniques and best practices for coding in C#, one of the world's most popular contemporary languages, you'll experience modeling a ""real world"" application through a case study, allowing you to see how both C# and OOP (a methodology you can use with any number of languages) come together to make your code reusable, modern, and efficient.  With more than 30 fully hands-on activities, you'll discover how to transform a simple model of an application into a fully-functional C# project, including designing the user interface, implementing the business logic, and integrating with a relational database for data storage. Along the way, you will explore the .NET Framework, the creation of a Windows-based user interface, a web-based user interface, and service-oriented programming, all using Microsoft's industry-leading Visual Studio 2010, C#, Silverlight, the Entity Framework, and more.
                    
"
9780201403473,0
9781449613549,0
9781155678078,0
9781592292639,0
9780538452984,0
9781430210115,"

My first experiments with object-oriented programming in PHP took place about six years ago. Unfortunately, the book that introduced me to the subject concentrated on the mechanics of writing classes and paid little heed to principles underlying OOP. As a result, I wrote classes that were closely intertwined with a specific project (""tightly coupled,"" to use the OOP terminology). Everything worked exactly the way I wanted, but the design had a fundamental flaw: the classes couldn't be used for any other project. Worse still, it was a large project--a bilingual, searchable database with more than 15,000 records--so any changes I wanted to make to it involved revising the whole code base. The purpose of this book is to help you avoid the same mistake. Although most chapters revolve around mini-projects, the classes they use are project-neutral. Rather than being a ""how to"" cookbook, the aim is to help developers with a solid knowledge of PHP basics add OOP to their skill set.
                    
"
9780672330162,0
9780131824089,0
9780072974164,0
9780073523330,0
9781590598450,"

Object-oriented programming (OOP) is something that is usually considered a black art for hardcore programmers, not a topic of conversation for Flash developers. However, when adobe introduced ActionScript 3.0 to the mix, it changed everything. ActionScript 3.0 is much more powerful than previous versions, allowing Flash developers to produce robust object-oriented applications. But with that power comes great responsibility--OOP is now a requirement, rather than optional, and there are new things to learn. This book, based on the ever-popular Object-Oriented ActionScript for Flash 8, provides you all you need to delve into the world of OOP with confidence, whether you are using the Flash IDE, Flex builder, or even command-line tools for your development work. First, you are taken gently through all the principles of OOP that you need to know, and then given a guide to designing and implementing applications in ActionScript 3.0. Next, we step up a gear, showing you the Flex builder development environment and teaching about creating reusable, extensible component frameworks, manager classes, animation and effects classes, UI widgets, and more. lastly, we look at some more advanced topics such as communication between Flash and the browser and Web services. case studies are included that apply the knowledge presented, giving you real-world projects to learn from and adapt for use in your own work. Mastering object-oriented programming is essential for modern Flash development, and Object-Oriented ActionScript 3.0 is the only guide you'll need.
                    
"
9780136150312,0
9780131194458,0
9780470128718,0
9781500995195,0
9781593270773,0
9780471744870,0
9780596008673,"

""Head First Object Oriented Analysis and Design is a refreshing look at subject of OOAD. What sets this book apart is its focus on learning. The authors have made the content of OOAD accessible, usable for the practitioner.""Ivar Jacobson, Ivar Jacobson Consulting""I just finished reading HF OOA&D and I loved it! The thing I liked most about this book was its focus on why we do OOA&D-to write great software!""Kyle Brown, Distinguished Engineer, IBM""Hidden behind the funny pictures and crazy fonts is a serious, intelligent, extremely well-crafted presentation of OO Analysis and Design. As I read the book, I felt like I was looking over the shoulder of an expert designer who was explaining to me what issues were important at each step, and why.""Edward Sciore, Associate Professor, Computer Science Department, Boston CollegeTired of reading Object Oriented Analysis and Design books that only makes sense after you're an expert? You've heard OOA&D can help you write great software every time-software that makes your boss happy, your customers satisfied and gives you more time to do what makes you happy.But how?Head First Object-Oriented Analysis & Design shows you how to analyze, design, and write serious object-oriented software: software that's easy to reuse, maintain, and extend; software that doesn't hurt your head; software that lets you add new features without breaking the old ones. Inside you will learn how to: Use OO principles like encapsulation and delegation to build applications that are flexibleApply the Open-Closed Principle (OCP) and the Single Responsibility Principle (SRP) to promote reuse of your codeLeverage the power of design patterns to solve your problems more efficientlyUse UML, use cases, and diagrams to ensure that all stakeholders arecommunicating clearly to help you deliver the right software that meets everyone's needs.By exploiting how your brain works, Head First Object-Oriented Analysis & Design compresses the time it takes to learn and retain complex information. Expect to have fun, expect to learn, expect to be writing great software consistently by the time you're finished reading this!
                    
"
9781590596197,"

If there's one thing I've learned as a developer, it's this: Complexity happens; simplicity, you have to consistently strive for. Nowhere is this truer than in education. Our role as teachers, by definition, is to simplify subjects so that they can be easily understood. A good teacher dispels trepidation with anecdote, abstraction with analogy, superstition and magic with knowledge. Simplicity, however, is not easily attained. In order to simplify, you must first gain an enc- passing understanding of the complex. It is a rare person who can simultaneously exist in both the simple and complex plains of a problem domain and communicate effectively at both levels. It is, however, these rare people who make the best teachers. Object-oriented programming (OOP) is a subject that many Flash developers do not approach due to a widespread erroneous perception of its enormous scope and complexity. Nothing could be further from the truth. The core concepts behind OOP are simple enough for a primary school student with a p- ticularly nasty case of Hynerian flu to understand in a single sitting.
                    
"
9780321245748,0
9781590595404,"

Foundations of Object-Oriented Programming Using .NET 2.0 Patterns solves the object-oriented and pattern-programming problem by mixing the two--the book teaches object-oriented concepts using patterns, or a solutions-based approach. The book's material is organized around tasks and patterns, and illustrated through development problems and solutions that include persistence, code efficiency, and good design.This book is of special interest to those who want to learn how to use .NET 2.0 Generics in conjunction with patterns. This unique book is based on the author's lectures, and the information unfolds in a practical manner.
                    
"
9789868115880,"

本書特色 本書旨在做為技職院校系統分析與設計課程的教材，所談論的主題是系統分析與設計，它是一本以物件導向技術為主軸，輔以UML為工具來講解有關系統分析與設計的書。任何對系統開發有興趣的朋友，軟體工程師，分析師或是想瞭解這個行業的社會人士均可嬝盂P參考。 本書採用的範例計畫以Java語言為主，在網頁介面是使用JSP(Java Server Page)來實作, 因為它跟Java運行在相同的環境中，沒有相容的問題。本書採用開放原碼(Open Source)的軟體工具來輔助我們的學習過程，目的是希望介紹給讀者如何利用既有的軟體, 在幾乎是零成本的環境下來體驗系統分析與設計的過程，而不自限於紙上談兵。 本書從下面幾個觀點來探討系統分析與設計的過程： 弁鉐[點著重在使用案例圖(use case diagram)的塑模，以及活動圖(activity diagram)的輔助性；靜態觀點著重在概念模型(conceptual modeling)、類別圖(class diagram)的塑模原則以及物件圖(object diagram)的輔助性；動態觀點著重在分析物件(analysis object)的應用、以及循序圖(sequence diagram)的塑模、建立原則；部署觀點強調軟體元件的封裝管理(component diagram)，配置與部署(deployment diagram)。在設計觀點上，內容強調類別以及類別庫的架構設計原則，並且介紹了基本的設計樣式(design pattern)以及框架(framework)的概念。 

"
9781590595763,"

As you work your way through 聶An Introduction to Object-Oriented Programming with Visual Basic .NET聶, you'll learn how to analyze the business requirements of an application, model the objects and relationships involved in the solution design, and, finally, implement the solution using Visual Basic .NET. Along the way you'll also learn the fundamentals of software design, the Unified Modeling Language, object-oriented programming, and Visual Basic .NET. 聶An Introduction to Object-Oriented Programming with Visual Basic .NET聶 is logically organized into three parts. Part One delves into object-oriented programming methodology and design--concepts that transcend a particular programming language. The concepts presented are important to the success of an object-oriented programming solution regardless of the implementation language chosen. At the conclusion of this part, a case study walks you through the design of a solution based on a real-world scenario. Part Two looks at how object-oriented programming is implemented in Visual Basic .NET. You will explore the structure of classes, class hierarchies, inheritance, and interfaces. The .NET Framework is introduced along with the Visual Studio Integrated Development Environment. Part Three returns to the case study introduced at the end of Part One. Using the knowledge gained in Part Two, programmers will transform the design into a functional VB .NET application. The application includes a graphical user interface, a business logic class library, and integration with a backend database.
                    
"
9780619159665,0
9781420043068,0
9780471471639,"

Provides an introduction to modern object-oriented design principles and applications for the fast-growing area of modeling and simulation Covers the topic of multi-domain system modeling and design with applications that have components from several areas Serves as a reference for the Modelica language as well as a comprehensive overview of application model libraries for a number of application domains
                    
"
9780672323089,0
9780596001469,"

One of the most significant features of Visual Basic .NET is the full support of object-oriented programming. For years, developers have been asking for it, but you may not be quite sure how it can help to create and maintain scalable .NET applications. VB.NET is a language that facilitates object-oriented programming, but does not guarantee good object-oriented code. That's where Object-Oriented Programming with Visual Basic .NET comes in. It will show you how to think about similarities in your application logic and how to design and create objects that maximize the benefit and power the .NET Framework enables.The concept of separating the interface from the implementation has been around for years, but with Object-Oriented Programming with Visual Basic .NET you'll put it all into practice and you'll never willingly go back to those old ways. With chapters on object fundamentals and class anatomy, you'll lay a foundation that will prepare you to think and apply code reuse principles. Following that, you'll be ready to dive deep into code and the dynamic ecology that it interacts with. Inheritance, containment, polymorphism, overloading, and overriding are just the beginning of this adventure. From there, you'll discover exception handling, reflection, serialization, and I/O.Packed with examples that will guide you through every step, Object-Oriented Programming with Visual Basic .NET is a guide for those with some programming experience. This book is for those who know Visual Basic 6.0 and are ready or have started the process of developing with Visual Basic .NET. It is an essential tool that will build your skills, as you become a master of Visual Basic .NET.It is one thing to know how to write object-oriented code. Knowing the when and the why is what makes good programmers. That's exactly what you'll know after reading this book.
                    
"
9780521827782,0
9780672326110,0
9780672321092,"

 Sams Teach Yourself Object Oriented Programming in 21 Days differs from other OOP books in two main ways. Many classic OOP books are designed for software engineers and teach at an academic level. Sams Teach Yourself Object Oriented Programming in 21 Days presents accessible, user-friendly lessons designed with the beginning programmer in mind. Other OOP books work to present both OOP and to teach a programming language (for example: Object-Oriented Programming in C++). Although Sams Teach Yourself Object Oriented Programming in 21 Days uses Java to present the examples, the book is designed to present concepts that apply to any OOP environment.
                    
"
9780131401570,0
9780130158857,0
9780735711839,0
9780201715941,0
9780136291558,0
9781884777790,"

Techniques and tricks to master basic and advanced OO Perl for programmers who already have basic to intermediate skills in procedural Perl.
                    
"
9780130867698,0
9780131238299,0
9780932633316,0
