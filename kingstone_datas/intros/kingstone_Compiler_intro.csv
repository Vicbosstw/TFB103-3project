ISBN,書籍簡介
9781716314674,0
9781716314131,"

The Supplemental Diagrams bring a colorful and rich experience for the cellular and biochemical processes of the novel Compiler The Greed Whisperer.
                    
"
9789389686623,0
9783639412215,"

Revision with unchanged content. In contrast to general-purpose systems, the correctness of real-time systems not only depends on the logical results of the computation but also on its temporal behavior specified by the worst-case execution time (WCET). Now-adays, software for embedded systems acting as real-time systems is written in high-level languages requiring the presence of a compiler. Modern com-piler optimizations aim at reducing the program's average-case exe-cution time completely ignoring the WCET. Tuning an application with respect to its worst-case execution time must be performed manually. To avoid this tedious and error-prone approach, an automation by the compiler is highly desired. This book faces this issue and describes the integration of a timing analyzer into a compiler infractructure. It presents flexible concepts describing the design and realization of a novel WCET-aware C compiler. Due to the combination of the extensive compiler knowledge on the program and the timing information, this compiler framework is best suited for the deve-lopment of WCET-aware compiler optimizations. This book is intended for students but also for any reader interested in the construction of real-time compilers.
                    
"
9781734139112,"

This book is designed primarily for use as a textbook in a one-semester course on compiler design for undergraduate students and beginning graduate students. The only prerequisites for this book are familiarity with basic algorithms and data structures (lists, maps, recursion, etc.), a rudimentary knowledge of computer architecture and assembly language, and some experience with the Java programming language.A complete study of compilers could easily fill several graduate-level courses, and therefore some simplifications and compromises are necessary for a one-semester course that is accessible to undergraduate students. Following are some of the decisions made in order to accommodate the goals of this book.The book has a narrow focus as a project-oriented course on compilers. Compiler theory is kept to a minimum, but the project orientation retains the ""fun"" part of studying compilers.The source language being compiled is relatively simple, but it is powerful enough to be interesting and challenging. It has basic data types, arrays, procedures, functions, and parameters, but it relegates many other interesting language features to the project exercises.The target language is assembly language for a virtual machine with a stack-based architecture, similar to but much simpler than the Java Virtual Machine (JVM). This approach greatly simplifies code generation. Both an assembler and an emulator for the virtual machine are provided on the course web site.No special compiler-related tools are required or used within the book. Students require access only to a Java compiler and a text editor, but most students will want to use Java with an Integrated Development Environment (IDE).One very important component of a compiler is the parser, which verifies that a source program conforms to the language syntax and produces an intermediate representation of the program that is suitable for additional analysis and code generation. There are several different approaches to parsing, but in keeping with the focus on a one-semester course, this book emphasizes only one approach, recursive descent parsing with one symbol lookahead.
                    
"
9781734139150,"

This book is designed primarily for use as a textbook in a one-semester course on compiler design for undergraduate students and beginning graduate students. The only prerequisites for this book are familiarity with basic algorithms and data structures (lists, maps, recursion, etc.), a rudimentary knowledge of computer architecture and assembly language, and some experience with the Kotlin programming language or a closely related language such as Java.A complete study of compilers could easily fill several graduate-level courses, and therefore some simplifications and compromises are necessary for a one-semester course that is accessible to undergraduate students. Following are some of the decisions made in order to accommodate the goals of this book.1. The book has a narrow focus as a project-oriented course on compilers. Compiler theory is kept to a minimum, but the project orientation retains the ""fun"" part of studying compilers. 2. The source language being compiled is relatively simple, but it is powerful enough to be interesting and challenging. It has basic data types, arrays, procedures, functions, and parameters, but it relegates many other interesting language features to the project exercises.3. The target language is assembly language for a virtual machine with a stack-based architecture, similar to but much simpler than the Java Virtual Machine (JVM). This approach greatly simplifies code generation. Both an assembler and an emulator for the virtual machine are provided on the course web site.4. No special compiler-related tools are required or used within the book. Students require access only to a Kotlin compiler and a text editor, but most students will want to use Kotlin with an Integrated Development Environment (IDE).5. One very important component of a compiler is the parser, which verifies that a source program conforms to the language syntax and produces an intermediate representation of the program that is suitable for additional analysis and code generation. There are several different approaches to parsing, but in keeping with the focus on a one-semester course, this book emphasizes only one approach, recursive descent parsing with one symbol lookahead.
                    
"
9783639407976,"

Revision with unchanged content. Have you ever thought about programming a .NET applicaton with PHP? One that also includes a Graphical User Interface? Such a scenario has been unlikely so far, but this book turns the tide. It shows you how to translate PHP scripts into .NET assemblies and how to run them on Windows and other operating systems. Since PHP has become an exciting programming language, it is time for the . NET community to benefit from it. The focus of this book is not about programming web applications; it is about implementing the language PHP as for the .NET Platform and how to integrate it with other .NET languages. Thus, software engineers can use PHP as a fully-fledged programming language for developing standalone applications outside of web pages. For this purpose, a compiler is presented that translates PHP scripts into .NET bytecode called Common Intermediate Language (CIL). This book also introduces PHP and CIL in detail and provides a good insight into basics and concepts of compiler construction. Furthermore, it looks behind the scenes of the Microsoft .NET Framework and the Mono Project, which is a considerable open-source implementation of the .NET Platform.
                    
"
9783639427103,"

Inhaltlich unver瓣nderte Neuauflage. Die Korrektheit von Echtzeitsystemen h瓣ngt nicht nur von logisch richtigen Ergebnissen sondern auch vom Zeitpunkt ihrer Berechnung ab. Analysatoren zur Ermittlung oberer Schranken von Programmlaufzeiten (WCET) sind ver-f羹g-bar, ben繹tigen aber Flow Facts, die vom Programmierer mit Bezug auf sein opti-miertes ausf羹hrbares Programm formuliert werden m羹ssen, w瓣hrend er selbst jedoch in einer Hochsprache wie C arbeitet. Notwendig wird daher eine manuelle ?bersetzung dieser Flow Facts, bei der jede Modifizierung des Pro-gramms - z.B. durch Optimierungen im Compiler - Anpassungen notwendig machen kann. Um diese fehleranf瓣llige und aufw瓣ndige Arbeit zu vermeiden, modelliert der Autor Flow Facts beispielhaft f羹r einen WCET-optimierenden Compiler und stellt verschiedene Techniken zu deren automatischen Trans-formation in diesem vor. Der Programmierer wird somit in die Lage versetzt, lediglich Flow Facts auf Ebene seiner Hochsprache ermitteln zu m羹ssen, w瓣hrend der Compiler diese automatisch f羹r eine WCET-Analyse verf羹gbar macht. Dieses Buch richtet sich an Entwickler und Forscher im Bereich (sicherheitskritischer) eingebetteter Systeme und an Entwickler von Compilern f羹r diese Systeme.
                    
"
9783642370502,"

This book constitutes the proceedings of the 22nd International Conference on Compiler Construction, CC 2013, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, which took place in Rome, Italy, in March 2013. The 13 papers presented in this book were carefully reviewed and selected from 53 submissions. They have been organized into five topical sections on register allocation, pointer analysis, data and information flow, machine learning, and refactoring.
                    
"
9781493944729,"

""Modern Compiler Design"" makes the topic of compiler design more accessible by focusing on principles and techniques of wide application. By carefully distinguishing between the essential (material that has a high chance of being useful) and the incidental (material that will be of benefit only in exceptional cases) much useful information was packed in this comprehensive volume. The student who has finished this book can expect to understand the workings of and add to a language processor for each of the modern paradigms, and be able to read the literature on how to proceed. The first provides a firm basis, the second potential for growth.
                    
"
9783642435911,"

While compilers for high-level programming languages are large complex software systems, they have particular characteristics that differentiate them from other software systems. Their functionality is almost completely well-defined - ideally there exist complete precise descriptions of the source and target languages. Additional descriptions of the interfaces to the operating system, programming system and programming environment, and to other compilers and libraries are often available. This book deals with the analysis phase of translators for programming languages. It describes lexical, syntactic and semantic analysis, specification mechanisms for these tasks from the theory of formal languages, and methods for automatic generation based on the theory of automata. The authors present a conceptual translation structure, i.e., a division into a set of modules, which transform an input program into a sequence of steps in a machine program, and they then describe the interfaces between the modules. Finally, the structures of real translators are outlined. The book contains the necessary theory and advice for implementation. This book is intended for students of computer science. The book is supported throughout with examples, exercises and program fragments.   

"
9783662466629,"

This book constitutes the proceedings of the 24th International Conference on Compiler Construction, CC 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015, in London, UK, in April 2015.The 11 papers presented in this volume were carefully reviewed and selected from 34 submissions. They deal with compiler engineering and compiling techniques; compiler analysis and optimisation and formal techniques in compilers. The book also contains one invited talk in full-paper length.
                    
"
9780857298287,0
9781441412768,0
9781576761052,0
9781420043822,0
9781590591345,"

All software developers use languages, which are the fundamental tool of the trade. Despite curiosity about how languages work, few developers actually understand how. Unfortunately, most texts on language and compiler development are hard to digest, written from academic platforms for use in college-level computer science programs. On the other hand, Build Your Own .NET Language and Compiler demystifies compiler and language development, and makes the subjects palatable for all programmers. This practical book presents techniques that you can apply to everyday work. You'll learn to add scripts and macro languages to your applications, add runtime expression evaluation to their applications, and generate code immediately. Further, you will learn parsing techniques, which are essential to extract information from any structured form of datalike text files, user input, XML, or HTML. As a bonus, the book includes a complete QuickBasic compatible compiler with source code that works. The compiler illustrates the books techniques and acts as a versatile .NET language.
                    
"
,0
,0
9789577171306,0
9789572302736,0
,0
,0
,0
,0
,0
,0
